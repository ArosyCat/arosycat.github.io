/**
* 归并排序
* 最好时间复杂度：O(NlogN)
* 平均时间复杂度：O(NlogN)
* 最坏时间复杂度：O(NlogN)
* 空间复杂度：O(N)
* 稳定
* @author ArosyCat
*/
public class MergeSort{
    
    public static void main(String[] args){
        int[] ints = {70, 5, 7, 11, 23, 32, 14, 6};
        mergeSort(ints,0,ints.length - 1,new int[ints.length]);
        System.out.println(Arrays.toString(ints)); //[5, 6, 7, 11, 14, 23, 32, 70]
    }

    public static void mergeSort(int[] arr,int left,int right,int[] temp){
        if(left < right){
            int middle = (left + right) / 2;
            mergeSort(arr,left,middle,temp);
            mergeSort(arr,middle + 1,right,temp);
            merge(arr,left,middle,right,temp);
        }      
    }
    
    private static void merge(int[] arr,int left,int middle,int right,int[] temp){
        int i = left;
        int j = middle + 1;
        int t = 0;
        while(i <= middle && j <= right){
            if(arr[i] <= arr[j]){
                temp[t] = arr[i];
                t += 1;
                i += 1;
            }else {
                temp[t] = arr[j];
                t += 1;
                j += 1;
            }
        }
        while(i <= middle){
            temp[t] = arr[i];
            t += 1;
            i += 1;
        }
        while(j <= right){
            temp[t] = arr[j];
            t += 1;
            j += 1;
        }
        t = 0;
        int tempLeft = left;
        while(tempLeft <= right){
            arr[tempLeft] = temp[t];
            t += 1;
            tempLeft += 1;
        }
    }
}
